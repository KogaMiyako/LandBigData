package com.dlut.dao;

import com.dlut.pojo.Node;
import com.dlut.pojo.NodeExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.springframework.stereotype.Repository;

@Repository
public interface NodeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    int countByExample(NodeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    int deleteByExample(NodeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    @Delete({
        "delete from node",
        "where node_id = #{nodeId,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer nodeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    @Insert({
        "insert into node (node_id, node_name, ",
        "node_status, node_ip, ",
        "node_specification, node_role, ",
        "node_creater, node_time, ",
        "password)",
        "values (#{nodeId,jdbcType=INTEGER}, #{nodeName,jdbcType=VARCHAR}, ",
        "#{nodeStatus,jdbcType=VARCHAR}, #{nodeIp,jdbcType=VARCHAR}, ",
        "#{nodeSpecification,jdbcType=VARCHAR}, #{nodeRole,jdbcType=VARCHAR}, ",
        "#{nodeCreater,jdbcType=VARCHAR}, #{nodeTime,jdbcType=TIMESTAMP}, ",
        "#{password,jdbcType=VARCHAR})"
    })
    int insert(Node record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    int insertSelective(Node record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    List<Node> selectByExample(NodeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "node_id, node_name, node_status, node_ip, node_specification, node_role, node_creater, ",
        "node_time, password",
        "from node",
        "where node_id = #{nodeId,jdbcType=INTEGER}"
    })
    @ResultMap("BaseResultMap")
    Node selectByPrimaryKey(Integer nodeId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") Node record, @Param("example") NodeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") Node record, @Param("example") NodeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Node record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table node
     *
     * @mbggenerated
     */
    @Update({
        "update node",
        "set node_name = #{nodeName,jdbcType=VARCHAR},",
          "node_status = #{nodeStatus,jdbcType=VARCHAR},",
          "node_ip = #{nodeIp,jdbcType=VARCHAR},",
          "node_specification = #{nodeSpecification,jdbcType=VARCHAR},",
          "node_role = #{nodeRole,jdbcType=VARCHAR},",
          "node_creater = #{nodeCreater,jdbcType=VARCHAR},",
          "node_time = #{nodeTime,jdbcType=TIMESTAMP},",
          "password = #{password,jdbcType=VARCHAR}",
        "where node_id = #{nodeId,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Node record);
}